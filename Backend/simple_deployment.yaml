apiVersion: v1
kind: Namespace
metadata:
  name: spmproject
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: account-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: account-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: account-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: account-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/employee.csv' INTO TABLE employee
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: account-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: account-db
  template:
    metadata:
      labels:
        app: account-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "account"
          volumeMounts:
            - name: account-db-storage
              mountPath: /var/lib/mysql
            - name: account-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: account-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: account-db-storage
          persistentVolumeClaim:
            claimName: account-db-pvc
        - name: account-sql-volume
          configMap:
            name: account-init-scripts
        - name: account-csv-volume
          persistentVolumeClaim:
            claimName: account-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: account-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: account-db-service
  namespace: spmproject
spec:
  selector:
    app: account-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: account
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: account
  template:
    metadata:
      labels:
        app: account
    spec:
      containers:
        - name: account
          image: gcr.io/spmprojecttest/account:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5001
          env:
            - name: DB_HOST
              value: "account-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "account"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: account-service
  namespace: spmproject
spec:
  selector:
    app: account
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: schedule-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: schedule-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: schedule-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schedule-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/schedule.csv' INTO TABLE schedule
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schedule-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: schedule-db
  template:
    metadata:
      labels:
        app: schedule-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "schedule"
          volumeMounts:
            - name: schedule-db-storage
              mountPath: /var/lib/mysql
            - name: schedule-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: schedule-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: schedule-db-storage
          persistentVolumeClaim:
            claimName: schedule-db-pvc
        - name: schedule-sql-volume
          configMap:
            name: schedule-init-scripts
        - name: schedule-csv-volume
          persistentVolumeClaim:
            claimName: schedule-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: schedule-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: schedule-db-service
  namespace: spmproject
spec:
  selector:
    app: schedule-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schedule
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: schedule
  template:
    metadata:
      labels:
        app: schedule
    spec:
      containers:
        - name: schedule
          image: gcr.io/spmprojecttest/schedule:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "schedule-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "schedule"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: schedule-service
  namespace: spmproject
spec:
  selector:
    app: schedule
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: request-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: request-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: request-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: request-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/request.csv' INTO TABLE request
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request-db
  template:
    metadata:
      labels:
        app: request-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "request"
          volumeMounts:
            - name: request-db-storage
              mountPath: /var/lib/mysql
            - name: request-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: request-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: request-db-storage
          persistentVolumeClaim:
            claimName: request-db-pvc
        - name: request-sql-volume
          configMap:
            name: request-init-scripts
        - name: request-csv-volume
          persistentVolumeClaim:
            claimName: request-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: request-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: request-db-service
  namespace: spmproject
spec:
  selector:
    app: request-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request
  template:
    metadata:
      labels:
        app: request
    spec:
      containers:
        - name: request
          image: gcr.io/spmprojecttest/request:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "request-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "request"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: request-service
  namespace: spmproject
spec:
  selector:
    app: request
  ports:
    - protocol: TCP
      port: 5003
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: meeting-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: meeting-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meeting-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: meeting-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/meeting.csv' INTO TABLE meeting
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeting-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeting-db
  template:
    metadata:
      labels:
        app: meeting-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "meeting"
          volumeMounts:
            - name: meeting-db-storage
              mountPath: /var/lib/mysql
            - name: meeting-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: meeting-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: meeting-db-storage
          persistentVolumeClaim:
            claimName: meeting-db-pvc
        - name: meeting-sql-volume
          configMap:
            name: meeting-init-scripts
        - name: meeting-csv-volume
          persistentVolumeClaim:
            claimName: meeting-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meeting-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: meeting-db-service
  namespace: spmproject
spec:
  selector:
    app: meeting-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeting
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeting
  template:
    metadata:
      labels:
        app: meeting
    spec:
      containers:
        - name: meeting
          image: gcr.io/spmprojecttest/meeting:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "meeting-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "meeting"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: meeting-service
  namespace: spmproject
spec:
  selector:
    app: meeting
  ports:
    - protocol: TCP
      port: 5004
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: notifications-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: notifications-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notifications-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notifications-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notifications-db
  template:
    metadata:
      labels:
        app: notifications-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "notifications"
          volumeMounts:
            - name: notifications-db-storage
              mountPath: /var/lib/mysql
            - name: notifications-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: notifications-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: notifications-db-storage
          persistentVolumeClaim:
apiVersion: v1
kind: Namespace
metadata:
  name: spmproject
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: account-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: account-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: account-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: account-init-scripts
  namespace: spmproject
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS account;

    USE account;

    CREATE TABLE Employee (
        Staff_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,  -- PK for staff
        Staff_FName VARCHAR(50) NOT NULL,  -- First Name
        Staff_LName VARCHAR(50) NOT NULL,  -- Last Name
        Dept VARCHAR(50) NOT NULL,  -- Department staff belong to
        Position VARCHAR(50) NOT NULL,  -- Position in the organization
        Country VARCHAR(50) NOT NULL,  -- Country located
        Email VARCHAR(50) NOT NULL,  -- Email Address
        Reporting_Manager INT,  -- FK to Staff_ID for reporting manager
        Role INT NOT NULL,  -- Role in the system (HR(1), Staff(2), Manager(3))
        Password VARCHAR(50) NOT NULL  -- Password for login
    );

    LOAD DATA INFILE '/var/lib/mysql-files/employee.csv'
    INTO TABLE Employee
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '\r\n'
    IGNORE 1 ROWS;

    -- set reporting_manager as foreign key to staff_id
    ALTER TABLE Employee ADD CONSTRAINT fk_reporting_manager FOREIGN KEY (Reporting_Manager) REFERENCES Employee(Staff_ID);
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: account-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: account-db
  template:
    metadata:
      labels:
        app: account-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "account"
          volumeMounts:
            - name: account-db-storage
              mountPath: /var/lib/mysql
            - name: account-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: account-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: account-db-storage
          persistentVolumeClaim:
            claimName: account-db-pvc
        - name: account-sql-volume
          configMap:
            name: account-init-scripts
        - name: account-csv-volume
          persistentVolumeClaim:
            claimName: account-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: account-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: account-db-service
  namespace: spmproject
spec:
  selector:
    app: account-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: account
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: account
  template:
    metadata:
      labels:
        app: account
    spec:
      containers:
        - name: account
          image: gcr.io/spmprojecttest/account:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5001
          env:
            - name: DB_HOST
              value: "account-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "account"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: account-service
  namespace: spmproject
spec:
  selector:
    app: account
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: schedule-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: schedule-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: schedule-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schedule-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/schedule.csv' INTO TABLE schedule
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schedule-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: schedule-db
  template:
    metadata:
      labels:
        app: schedule-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "schedule"
          volumeMounts:
            - name: schedule-db-storage
              mountPath: /var/lib/mysql
            - name: schedule-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: schedule-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: schedule-db-storage
          persistentVolumeClaim:
            claimName: schedule-db-pvc
        - name: schedule-sql-volume
          configMap:
            name: schedule-init-scripts
        - name: schedule-csv-volume
          hostPath:
              path: ".\SimpleService\Schedule\db\schedule.sql"  
              type: Directory
          # persistentVolumeClaim:
          #   claimName: schedule-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: schedule-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: schedule-db-service
  namespace: spmproject
spec:
  selector:
    app: schedule-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schedule
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: schedule
  template:
    metadata:
      labels:
        app: schedule
    spec:
      containers:
        - name: schedule
          image: gcr.io/spmprojecttest/schedule:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "schedule-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "schedule"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: schedule-service
  namespace: spmproject
spec:
  selector:
    app: schedule
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: request-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: request-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: request-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: request-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/request.csv' INTO TABLE request
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request-db
  template:
    metadata:
      labels:
        app: request-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "request"
          volumeMounts:
            - name: request-db-storage
              mountPath: /var/lib/mysql
            - name: request-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: request-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: request-db-storage
          persistentVolumeClaim:
            claimName: request-db-pvc
        - name: request-sql-volume
          configMap:
            name: request-init-scripts
        - name: request-csv-volume
          persistentVolumeClaim:
            claimName: request-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: request-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: request-db-service
  namespace: spmproject
spec:
  selector:
    app: request-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request
  template:
    metadata:
      labels:
        app: request
    spec:
      containers:
        - name: request
          image: gcr.io/spmprojecttest/request:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "request-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "request"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: request-service
  namespace: spmproject
spec:
  selector:
    app: request
  ports:
    - protocol: TCP
      port: 5003
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: meeting-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: meeting-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meeting-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: meeting-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/meeting.csv' INTO TABLE meeting
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeting-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeting-db
  template:
    metadata:
      labels:
        app: meeting-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "meeting"
          volumeMounts:
            - name: meeting-db-storage
              mountPath: /var/lib/mysql
            - name: meeting-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: meeting-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: meeting-db-storage
          persistentVolumeClaim:
            claimName: meeting-db-pvc
        - name: meeting-sql-volume
          configMap:
            name: meeting-init-scripts
        - name: meeting-csv-volume
          persistentVolumeClaim:
            claimName: meeting-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meeting-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: meeting-db-service
  namespace: spmproject
spec:
  selector:
    app: meeting-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meeting
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meeting
  template:
    metadata:
      labels:
        app: meeting
    spec:
      containers:
        - name: meeting
          image: gcr.io/spmprojecttest/meeting:1.0
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: "meeting-db-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "root"
            - name: DB_NAME
              value: "meeting"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  name: meeting-service
  namespace: spmproject
spec:
  selector:
    app: meeting
  ports:
    - protocol: TCP
      port: 5004
      targetPort: 5000
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: notifications-db-pv
  namespace: spmproject
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  gcePersistentDisk:
    pdName: notifications-db-disk
    fsType: ext4
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notifications-db-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notifications-init-scripts
  namespace: spmproject
data:
  init.sql: |
    -- SQL commands to initialize the database
    LOAD DATA INFILE '/var/lib/mysql-files/notifications.csv' INTO TABLE notifications
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 ROWS;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-db
  namespace: spmproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notifications-db
  template:
    metadata:
      labels:
        app: notifications-db
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            - name: MYSQL_DATABASE
              value: "notifications"
          volumeMounts:
            - name: notifications-db-storage
              mountPath: /var/lib/mysql
            - name: notifications-sql-volume
              mountPath: /docker-entrypoint-initdb.d
            - name: notifications-csv-volume
              mountPath: /var/lib/mysql-files
      volumes:
        - name: notifications-db-storage
          persistentVolumeClaim:
            claimName: notifications-db-pvc
        - name: notifications-sql-volume
          configMap:
            name: notifications-init-scripts
        - name: notifications-csv-volume
          persistentVolumeClaim:
            claimName: notifications-csv-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notifications-csv-pvc
  namespace: spmproject
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: notifications-db-service
  namespace: spmproject
spec:
  selector:
    app: notifications-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306